// This is your Prisma schema file.
// It defines your database models and their relations.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Define your data source and generator.
datasource db {
  provider = "sqlite"
  url      = env(DATABASE_URL)
}

generator kysely {
  provider = "prisma-kysely"

  importExtension    = ".ts"
  exportWrappedTypes = true
  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output             = "./src"
  fileName           = "database-types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName       = "enums.ts"
}

// 2. Define your database models.

/// A model for raw airport data, typically used for initial data ingestion
/// before it's processed and normalized into the main tables.
model AirportRaw {
  /// The name of the city.
  city_name    String
  /// The full name of the country.
  country      String
  /// The two-letter code for the country.
  country_code String
  /// The IATA code for the airport, serving as the primary key.
  IATA         String @id
  /// The geographic latitude of the airport.
  latitude     Float
  /// The geographic longitude of the airport. Stored as TEXT as per the original DDL.
  longitude    String
  /// The number of direct routes from this airport.
  no_routes    Int
  /// The official name of the airport.
  name         String

  @@map("airport_raw")
}

/// Stores information about the world's continents.
model Continent {
  /// The auto-incrementing primary key for the continent.
  id   Int       @id @default(autoincrement())
  /// The full name of the continent (e.g., "North America"). Must be unique.
  continent_name String    @unique
  /// A list of all countries located in this continent.
  countries      Country[]

  @@map("continent")
}

/// Stores information about countries.
model Country {
  /// The two-letter ISO 3166-1 alpha-2 country code, serving as the primary key.
  country_code String     @id
  /// The full name of the country (e.g., "United States").
  country_name String
  /// A foreign key referencing the continent's ID.
  continent_id Int?
  /// A flag (0 or 1) indicating if the country is part of the Schengen Area.
  is_schengen  Int        @default(0)
  /// The continent this country belongs to.
  continent    Continent? @relation(fields: [continent_id], references: [id])
  /// A list of all states or provinces within this country.
  states       State[]
  /// A list of all airports within this country.
  airports     Airport[]

  @@map("country")
}

/// Stores information about states or administrative regions within countries.
model State {
  /// The auto-incrementing primary key for the state.
  state_id     Int       @id @default(autoincrement())
  /// The abbreviated code for the state (e.g., "CA" for California).
  state_code   String
  /// The full name of the state (e.g., "California").
  state_name   String
  /// A foreign key referencing the country's code this state belongs to.
  country_code String
  /// The country this state belongs to.
  country      Country   @relation(fields: [country_code], references: [country_code])
  /// A list of all airports within this state.
  airports     Airport[]

  /// Ensures that the combination of state_code and country_code is unique.
  @@unique([state_code, country_code])
  @@map("state")
}

/// Stores core, normalized information about each airport.
model Airport {
  /// The IATA code for the airport, serving as the primary key (e.g., 'ATL').
  iata_code          String  @id
  /// The ICAO code for the airport (e.g., 'KATL').
  icao_code          String?
  /// The official name of the airport.
  name               String
  /// The name of the city the airport serves.
  city_name          String?
  /// A foreign key referencing the state's ID.
  state_id           Int?
  /// A foreign key referencing the country's code.
  country_code       String
  /// The geographic latitude of the airport.
  latitude           Float
  /// The geographic longitude of the airport.
  longitude          Float
  /// The timezone in the "Area/City" format (e.g., "America/New_York").
  timezone           String?
  /// The airport's elevation in feet.
  elevation_ft       Int?
  /// An affiliate URL to Viator for the airport's city. Supports monetization.
  viator_url         String?
  /// The state this airport is located in.
  state              State?  @relation(fields: [state_id], references: [state_id])
  /// The country this airport is located in.
  country            Country @relation(fields: [country_code], references: [country_code])
  /// A list of all routes originating from this airport.
  origin_routes      Route[] @relation("OriginRoutes")
  /// A list of all routes with this airport as the destination.
  destination_routes Route[] @relation("DestinationRoutes")

  // This comment will not appear in the AST. It's for internal notes.
  // We can add indexes here to speed up queries.
  // @@index([city_name])
  // @@index([country_code])
  @@map("airport")
}

/// Stores information about airlines.
model Airline {
  /// The IATA code for the airline, serving as the primary key (e.g., 'DL').
  iata_code       String         @id
  /// The official name of the airline.
  name            String
  /// The customer service phone number for the airline.
  phone           String?
  /// The official website URL for the airline.
  url             String?
  /// A flag (0 or 1) indicating if the airline is a low-cost carrier.
  is_lowcost      Int?
  /// A flag (0 or 1) indicating if the airline is part of the Oneworld alliance.
  is_oneworld     Int            @default(0)
  /// A flag (0 or 1) indicating if the airline is part of the Star Alliance.
  is_staralliance Int            @default(0)
  /// A flag (0 or 1) indicating if the airline is part of the SkyTeam alliance.
  is_skyteam      Int            @default(0)
  /// A list of all route-airline connections for this airline.
  routes          RouteAirline[]

  @@map("airline")
}

/// Stores information about a direct flight route between two airports.
model Route {
  /// The auto-incrementing primary key for the route.
  id         Int            @id @default(autoincrement())
  /// The IATA code of the origin airport.
  origin_iata      String
  /// The IATA code of the destination airport.
  destination_iata String
  /// The distance of the route in kilometers.
  distance_km      Int?
  /// The estimated duration of the flight in minutes.
  duration_min     Int?
  /// The origin airport for this route.
  origin           Airport        @relation("OriginRoutes", fields: [origin_iata], references: [iata_code])
  /// The destination airport for this route.
  destination      Airport        @relation("DestinationRoutes", fields: [destination_iata], references: [iata_code])
  /// A list of all airlines that operate on this route.
  airlines         RouteAirline[]

  /// Ensures that each origin-destination pair is unique.
  @@unique([origin_iata, destination_iata])
  // @@index([origin_iata])
  // @@index([destination_iata])
  @@map("route")
}

/// Junction model for the many-to-many relationship between Routes and Airlines.
model RouteAirline {
  /// A foreign key referencing the route's ID.
  route_id     Int
  /// A foreign key referencing the airline's IATA code.
  airline_iata String
  /// The route associated with this entry.
  route        Route   @relation(fields: [route_id], references: [id])
  /// The airline associated with this entry.
  airline      Airline @relation(fields: [airline_iata], references: [iata_code])

  /// Defines the composite primary key for this junction table.
  @@id([route_id, airline_iata])
  @@map("route_airline")
}

// --- USER AND ANALYTICS MODELS (Commented out as per SQL file) ---
// You can uncomment these sections when you're ready to implement user features.
/**
 * /// Stores user account information.
 * model User {
 * /// The auto-incrementing primary key for the user.
 * user_id           Int             @id @default(autoincrement())
 * /// The user's unique username.
 * username          String          @unique
 * /// The user's unique email address.
 * email             String          @unique
 * /// The user's hashed password.
 * password_hash     String
 * /// The user's subscription tier, either 'free' or 'pro'.
 * subscription_tier String          @default("free") // Consider using an enum here for better type safety.
 * /// The timestamp when the user account was created.
 * created_at        DateTime        @default(now())
 * /// A list of all searches saved by this user.
 * saved_searches    SavedSearch[]
 * /// A list of all search analytics logs for this user.
 * search_analytics  SearchAnalytic[]
 * @@map("user")
 * }
 * /// Stores saved multi-city searches, a "Pro" feature.
 * model SavedSearch {
 * /// The auto-incrementing primary key for the saved search.
 * search_id  Int                   @id @default(autoincrement())
 * /// The ID of the user who owns this search.
 * user_id    Int
 * /// The user who owns this search.
 * user       User                  @relation(fields: [user_id], references: [user_id])
 * /// The name given to the search by the user.
 * search_name String
 * /// The timestamp when the search was saved.
 * created_at DateTime              @default(now())
 * /// A list of all origin airports included in this saved search.
 * airports   SavedSearchAirport[]
 * @@map("saved_searche")
 * }
 * /// Junction model to store the multiple origin airports for a saved search.
 * model SavedSearchAirport {
 * /// A foreign key referencing the saved search's ID.
 * search_id    Int
 * /// The IATA code of an origin airport in the search.
 * airport_iata String
 * /// The saved search this entry belongs to.
 * search       SavedSearch @relation(fields: [search_id], references: [search_id], onDelete: Cascade)
 * /// The airport associated with this entry.
 * airport      Airport     @relation(fields: [airport_iata], references: [iata_code])
 * /// Defines the composite primary key.
 * @@id([search_id, airport_iata])
 * @@map("saved_search_airport")
 * }
 * /// Logs user searches for data analytics (the DaaS concept).
 * model SearchAnalytic {
 * /// The auto-incrementing primary key for the log entry.
 * log_id           Int                    @id @default(autoincrement())
 * /// The ID of the user who performed the search. Can be null for anonymous users.
 * user_id          Int?
 * /// The user who performed the search, if logged in.
 * user             User?                  @relation(fields: [user_id], references: [user_id])
 * /// The timestamp when the search was performed.
 * search_timestamp DateTime               @default(now())
 * /// A list of all origin airports included in this search log.
 * origins          SearchAnalyticOrigin[]
 * @@map("search_analytic")
 * }
 * /// Stores the origin airports for each search analytics log entry.
 * model SearchAnalyticOrigin {
 * /// A foreign key referencing the search log's ID.
 * log_id      Int
 * /// The IATA code of an origin airport in the logged search.
 * origin_iata String
 * /// The search log this entry belongs to.
 * search_log  SearchAnalytic @relation(fields: [log_id], references: [log_id], onDelete: Cascade)
 * /// The airport associated with this entry.
 * airport     Airport        @relation(fields: [origin_iata], references: [iata_code])
 * /// Defines the composite primary key.
 * @@id([log_id, origin_iata])
 * @@map("search_analytic_origin")
 * }
 */
